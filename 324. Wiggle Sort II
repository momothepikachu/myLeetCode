/**
Given an unsorted array nums, reorder it such that nums[0] < nums[1] > nums[2] < nums[3]....

Example 1:

Input: nums = [1, 5, 1, 1, 6, 4]
Output: One possible answer is [1, 4, 1, 5, 1, 6].
Example 2:

Input: nums = [1, 3, 2, 2, 3, 1]
Output: One possible answer is [2, 3, 1, 3, 1, 2].
Note:
You may assume all input has valid answer.

Follow Up:
Can you do it in O(n) time and/or in-place with O(1) extra space?
 * */

/**
 * @param {number[]} nums
 * @return {void} Do not return anything, modify nums in-place instead.
 */
var wiggleSort = function(nums) {
    let sorted = nums.slice().sort((a,b)=>b-a)
    let bigger = sorted.splice(0, parseInt(nums.length/2))
    let smaller = sorted
    for(let i=0;i<bigger.length; i++){
        nums[2*i+1]=bigger[i]
    }
    for(let j=0; j<smaller.length; j++){
        nums[2*j]=smaller[j]
    }
    return nums
};
console.log(wiggleSort([1, 5, 1, 1, 6, 4]))
