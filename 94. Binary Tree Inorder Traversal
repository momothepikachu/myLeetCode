/**
 * Definition for a binary tree node.
 * function TreeNode(val) {
 *     this.val = val;
 *     this.left = this.right = null;
 * }
 */
/**
 * @param {TreeNode} root
 * @return {number[]}
 */
var inorderTraversal = function(root) {
    function valNode(x){
        if(x==null) return x
        return x.val
    }
    let arr = []
    function inOrder(tree, idx){
        let after = arr.splice(idx+1)
        arr.pop()
        if(!tree){
            arr = [...arr, ...after]
        } else {
            arr = [...arr, valNode(tree.left), tree.val, valNode(tree.right), ...after]
            inOrder(tree.right, idx+2)
            inOrder(tree.left, idx)               
        }
    }
    inOrder(root, 0)
    return arr
};

// Solution2:
// const handleLeftTree = (root, stack=[], res=[]) => {
//     if (!root) return
//     while (root.left) {
//         stack.push(root)
//         root = root.left
//     }
//     res.push(root.val)
//     return root
// }
// var inorderTraversal = function(root) {
//     let stack = []
//     let res = []

//     root = handleLeftTree(root, stack, res)

//     while(root){
//         if (root.right) {
//             root = root.right
//             root = handleLeftTree(root, stack, res)
//         } else {
//             root = stack.pop()
//             if (root) res.push(root.val)  
//         }
//     }
//    return res
// };
