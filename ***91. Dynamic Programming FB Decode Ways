/**
A message containing letters from A-Z is being encoded to numbers using the following mapping:

'A' -> 1
'B' -> 2
...
'Z' -> 26
Given a non-empty string containing only digits, determine the total number of ways to decode it.

Example 1:

Input: "12"
Output: 2
Explanation: It could be decoded as "AB" (1 2) or "L" (12).
Example 2:

Input: "226"
Output: 3
Explanation: It could be decoded as "BZ" (2 26), "VF" (22 6), or "BBF" (2 2 6).
 * */

/**
 * @param {string} s
 * @return {number}
 */
// Recursion Solution exceed timelimit
var numDecodings1 = function(s) {
    if(s.length===0) return 1
    if(parseInt(s[0])===0) return 0
    let count=0
    count+=numDecodings(s.slice(1))
    let firstTwo = s.slice(0,2)
    if(firstTwo.length==2 && parseInt(firstTwo)<=26){
        count+=numDecodings(s.slice(2))
    }
    return count
};

// Dynamic Programming
var numDecodings = function(s) {
    let dp=Array(s.length+1).fill(0)
    dp[0]=1
    dp[1]=s[0]==0?0:1
    for(let i=2; i<=s.length; i++){
        if(s[i-1]!=0){
            dp[i]+=dp[i-1]
        }
        if(s[i-2]==1 || (s[i-2]==2 && s[i-1]<=6)){
            dp[i]+=dp[i-2]
        }
    }
    return dp[s.length]
};

// console.log(numDecodings("1787897759966261825913315262377298132516969578441236833255596967132573482281598412163216914566534565"))
console.log(numDecodings("226"))
// Similar to LeetCode 70.climbing stairs
var numDecodings = function(s) {
    if(s.length===0) return 1
    if(s.length===1){
        return s!=0? 1 : 0
    }
    let oneStep = numDecodings(s[0])
    let twoStep = 1
    let result
    let len = s.length
    for(let i=2; i<=len && oneStep+twoStep!=0; i++){
        oneStep *= s[i-1]!=0? 1:0
        twoStep *= (s.slice(i-2, i)[0]==1 || s.slice(i-2, i)[0]==2 && s.slice(i-2, i)[1]<=6)? 1:0
        result = oneStep+twoStep
        twoStep = oneStep
        oneStep = result
    }
    return result
};
