/**

You are climbing a stair case. It takes n steps to reach to the top.

Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?

Note: Given n will be a positive integer.

Example 1:

Input: 2
Output: 2
Explanation: There are two ways to climb to the top.
1. 1 step + 1 step
2. 2 steps
Example 2:

Input: 3
Output: 3
Explanation: There are three ways to climb to the top.
1. 1 step + 1 step + 1 step
2. 1 step + 2 steps
3. 2 steps + 1 step

 * @param {number} n
 * @return {number}
 */
 
let climbStairs = function(n) {
    function combination(setLength, i) {
        let sum = 1;
        for (let j=0; j<i; j++) {
            sum = sum*(setLength-j)/(i-j)
        }
        return sum;
    }
    let total = 1;
    let twoSteps = n/2;
    for (let i=1; i<=twoSteps; i++) {
        total += combination(n-i, i)
    }
    return total;
};

// Fibonacci solution:
let climbStairs = function(n) {
    if(n<=2){ return n}
    return climbStairs(n-1)+climbStairs(n-2)
};
// Dynamic Programming:
let climbStairs1 = function(n) {
    if(n<=2){ return n}
    let oneStep=2
    let twoStep=1
    let newStep
    for(let i=3; i<=n; i++){
        newStep=oneStep+twoStep
        twoStep=oneStep
        oneStep=newStep
    }
    return newStep
};
console.log(climbStairs(3))
