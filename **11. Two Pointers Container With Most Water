/**
Given n non-negative integers a1, a2, ..., an , where each represents a point at coordinate (i, ai). n vertical lines are drawn such that the two endpoints of line i is at (i, ai) and (i, 0). Find two lines, which together with x-axis forms a container, such that the container contains the most water.

Example:

Input: [1,8,6,2,5,4,8,3,7]
Output: 49

Note: You may not slant the container and n is at least 2.
 * */

/**
 * @param {number[]} height
 * @return {number}
 */
// Memory Limit Exceeded
// var maxArea = function(height) {
//     let htable={}
//     function largest(arr){
//         if(htable[arr]) return htable[arr]
//         if(arr.length==2){
//             htable[arr]=[Math.min(...arr), arr]
//             return htable[arr]
//         }
//         let [lastLarge, rest]= largest(arr.slice(1))
//         let curNum = arr.slice(0, 1)[0]
//         for(let i=0; i<rest.length; i++){
//             let area = (i+1)*Math.min(curNum, rest[i])
//             if(area>lastLarge) lastLarge = area
//         }
//         htable[arr]=[lastLarge, arr]
//         return htable[arr]
//     }

//     let [result, arr]=largest(height)
//     return result
// };

var maxArea = function(height) {
    let start = 0
    let end = height.length-1
    let maxArea = 0
    while(end>start){
        let area = Math.min(height[start], height[end])*(end-start)
        if(area>maxArea) maxArea = area
        if(height[start]>height[end]){
            end--
        } else {
            start++
        }
    }
    return maxArea
};
console.log(maxArea([1,8,6,2,5,4,8,3,7]))
